@implements IDisposable
@inject NavigationManager navigationManager

<button type="button"
        @onclick="OnNavigationLinkClick"
        class="@(isSelected ? "bg-blue-600 text-white": "bg-white text-gray-500") inline-flex flex-col items-center justify-center px-8" >
    @IconContent
    @TitleContent
</button>

@code {
    [Parameter] public bool isSelected { get; set; } = false;
    [Parameter] public string route { get; set; } = "/";
    [Parameter] public required RenderFragment IconContent { get; set; }
    [Parameter] public required RenderFragment TitleContent { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        navigationManager.LocationChanged += OnLocationChanged;
    }
    
    public void Dispose()
    {
        navigationManager.LocationChanged -= OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        if (args.Location.Contains(route))
        {
            isSelected = true;
        }
        else
        {
            isSelected = false;
        }
        
        StateHasChanged();
    }

    private void OnNavigationLinkClick()
    {
        navigationManager.NavigateTo(route);
    }
}